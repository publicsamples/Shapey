/** Autogenerated Main.cpp. */

// ===============================| Include only the DSP files  |===============================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// =========================| Now we can add the rest of the codebase |=========================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// =====================================| Project Factory |=====================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations -----------------------------------------------------------------
		
		registerPolyNode<project::shifty<1>, wrap::illegal_poly<project::shifty<1>>>();
		registerPolyNode<project::salenLP<1>, project::salenLP<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::salenHP<1>, project::salenHP<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::salenBP<1>, project::salenBP<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::OBLP<1>, project::OBLP<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::OBHP<1>, project::OBHP<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::OBBPF<1>, project::OBBPF<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::moogLadder<1>, project::moogLadder<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::klp<1>, project::klp<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::khp2<1>, project::khp2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::granular<1>, wrap::illegal_poly<project::granular<1>>>();
		registerPolyNode<project::granul<1>, wrap::illegal_poly<project::granul<1>>>();
		registerPolyNode<project::g<1>, wrap::illegal_poly<project::g<1>>>();
		registerPolyNode<project::DODE<1>, project::DODE<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Comb<1>, project::Comb<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::filtest<1>, project::filtest<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::lfo<1>, wrap::illegal_poly<project::lfo<1>>>();
		registerPolyNode<project::verb<1>, wrap::illegal_poly<project::verb<1>>>();
		registerDataNode<project::_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


