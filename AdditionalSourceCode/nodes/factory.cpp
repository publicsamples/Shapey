/** Autogenerated Main.cpp. */

// =================================| Include only the DSP files  |=================================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// ===========================| Now we can add the rest of the codebase |===========================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// =======================================| Project Factory |=======================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations ----------------------------------------------------------------------
		
		registerPolyNode<project::shfiter<1>, project::shfiter<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::psfine<1>, project::psfine<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::ps2<1>, project::ps2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::klp2<1>, project::klp2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::klp<1>, project::klp<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::khp2<1>, project::khp2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::khp<1>, project::khp<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::hole<1>, scriptnode::wrap::illegal_poly<project::hole<1>>>();
		registerPolyNode<project::gran<1>, project::gran<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Comb<1>, project::Comb<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::files<1>, project::files<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::HpLp<1>, project::HpLp<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::lfo<1>, wrap::illegal_poly<project::lfo<1>>>();
		registerPolyNode<project::NewArrange<1>, project::NewArrange<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::NoteSelector<1>, project::NoteSelector<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::NoteSelector2<1>, wrap::illegal_poly<project::NoteSelector2<1>>>();
		registerPolyNode<project::osc1<1>, project::osc1<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::oscshaper<1>, project::oscshaper<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::shift<1>, project::shift<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::verb<1>, wrap::illegal_poly<project::verb<1>>>();
		registerDataNode<project::arrange_networkdata>();
		registerDataNode<project::blank_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::env_networkdata>();
		registerDataNode<project::Envelope_networkdata>();
		registerDataNode<project::Envelope2_networkdata>();
		registerDataNode<project::Envelope3_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::FileOut1_networkdata>();
		registerDataNode<project::Fold_networkdata>();
		registerDataNode<project::fx_networkdata>();
		registerDataNode<project::GateSeq1_networkdata>();
		registerDataNode<project::in2_networkdata>();
		registerDataNode<project::input_networkdata>();
		registerDataNode<project::Input3_networkdata>();
		registerDataNode<project::Input4_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::invgate_networkdata>();
		registerDataNode<project::lfo2_networkdata>();
		registerDataNode<project::lfo3_networkdata>();
		registerDataNode<project::lfo4_networkdata>();
		registerDataNode<project::Lfos_networkdata>();
		registerDataNode<project::Md2nte2_networkdata>();
		registerDataNode<project::mix_networkdata>();
		registerDataNode<project::mod_networkdata>();
		registerDataNode<project::ModOut1_networkdata>();
		registerDataNode<project::modtest1_networkdata>();
		registerDataNode<project::ModToNote_networkdata>();
		registerDataNode<project::OscOut1_networkdata>();
		registerDataNode<project::OscOut2_networkdata>();
		registerDataNode<project::OscOut3_networkdata>();
		registerDataNode<project::OscOut4_networkdata>();
		registerDataNode<project::OscTest_networkdata>();
		registerDataNode<project::out1_networkdata>();
		registerDataNode<project::Pitch_networkdata>();
		registerDataNode<project::Pitches_networkdata>();
		registerDataNode<project::PitchNu1_networkdata>();
		registerDataNode<project::PitchNu8_networkdata>();
		registerDataNode<project::PitchStage1_networkdata>();
		registerDataNode<project::send1_networkdata>();
		registerDataNode<project::Send2_networkdata>();
		registerDataNode<project::send3_networkdata>();
		registerDataNode<project::send4_networkdata>();
		registerDataNode<project::send5_networkdata>();
		registerDataNode<project::send6_networkdata>();
		registerDataNode<project::send7_networkdata>();
		registerDataNode<project::seq1_networkdata>();
		registerDataNode<project::ShaperMod_networkdata>();
		registerDataNode<project::Step_networkdata>();
		registerDataNode<project::subby_networkdata>();
		registerDataNode<project::subs_networkdata>();
		registerDataNode<project::timertest_networkdata>();
		registerDataNode<project::Trig1_networkdata>();
		registerDataNode<project::TrigIn_networkdata>();
		registerDataNode<project::TrigSeq5_networkdata>();
		registerDataNode<project::TrigSeq6_networkdata>();
		registerDataNode<project::TrigSeq7_networkdata>();
		registerDataNode<project::TrigSeq8_networkdata>();
		registerDataNode<project::TrigTests_networkdata>();
		registerDataNode<project::VcaAdsr_networkdata>();
		registerDataNode<project::voice_networkdata>();
		registerDataNode<project::VoiceOut1_networkdata>();
		registerDataNode<project::VoiceOut2_networkdata>();
		registerDataNode<project::VoiceOut3_networkdata>();
		registerDataNode<project::VoiceOut4_networkdata>();
		registerDataNode<project::VoiceTrig1_networkdata>();
		registerDataNode<project::Xfade1_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


