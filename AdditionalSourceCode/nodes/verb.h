#pragma once

// These will improve the readability of the connection definition

#define getT(Idx) template get<Idx>()
#define connectT(Idx, target) template connect<Idx>(target)
#define getParameterT(Idx) template getParameter<Idx>()
#define setParameterT(Idx, value) template setParameter<Idx>(value)
#define setParameterWT(Idx, value) template setWrapParameter<Idx>(value)
using namespace scriptnode;
using namespace snex;
using namespace snex::Types;

namespace verb_impl
{
// ==============================| Node & Parameter type declarations |==============================

DECLARE_PARAMETER_RANGE_SKEW(dry_wet_mixer_c0Range, 
                             -100., 
                             0., 
                             5.42227);

template <int NV>
using dry_wet_mixer_c0 = parameter::from0To1<core::gain<NV>, 
                                             0, 
                                             dry_wet_mixer_c0Range>;

template <int NV> using dry_wet_mixer_c1 = dry_wet_mixer_c0<NV>;

template <int NV>
using dry_wet_mixer_multimod = parameter::list<dry_wet_mixer_c0<NV>, dry_wet_mixer_c1<NV>>;

template <int NV>
using dry_wet_mixer_t = control::xfader<dry_wet_mixer_multimod<NV>, 
                                        faders::linear>;

template <int NV>
using chain1_t = container::chain<parameter::empty, 
                                  wrap::fix<2, core::gain<NV>>>;

DECLARE_PARAMETER_RANGE_SKEW(cable_table2_modRange, 
                             0., 
                             100., 
                             0.30103);

using cable_table2_mod = parameter::from0To1<jdsp::jchorus, 
                                             3, 
                                             cable_table2_modRange>;

struct cable_table2_t_data
{
	span<float, 512> data =
	{
		0.f, 0.00195694f, 0.00391388f, 0.00587082f, 0.00782776f, 0.00978476f,
		0.0117417f, 0.0136986f, 0.0156556f, 0.0176125f, 0.0195695f, 0.0215264f,
		0.0234834f, 0.0254403f, 0.0273973f, 0.0293542f, 0.0313112f, 0.0332681f,
		0.035225f, 0.037182f, 0.0391389f, 0.0410959f, 0.0430529f, 0.0450098f,
		0.0469667f, 0.0489237f, 0.0508806f, 0.0528376f, 0.0547945f, 0.0567515f,
		0.0587084f, 0.0606654f, 0.0626223f, 0.0645792f, 0.0665362f, 0.0684931f,
		0.0704501f, 0.0724071f, 0.074364f, 0.0763209f, 0.0782779f, 0.0802348f,
		0.0821918f, 0.0841487f, 0.0861057f, 0.0880626f, 0.0900196f, 0.0919765f,
		0.0939335f, 0.0958904f, 0.0978473f, 0.0998043f, 0.101761f, 0.103718f,
		0.105675f, 0.107632f, 0.109589f, 0.111546f, 0.113503f, 0.11546f,
		0.117417f, 0.119374f, 0.121331f, 0.123288f, 0.125245f, 0.127202f,
		0.129158f, 0.131115f, 0.133072f, 0.135029f, 0.136986f, 0.138943f,
		0.1409f, 0.142857f, 0.144814f, 0.146771f, 0.148728f, 0.150685f,
		0.152642f, 0.154599f, 0.156556f, 0.158513f, 0.16047f, 0.162427f,
		0.164384f, 0.166341f, 0.168297f, 0.170254f, 0.172211f, 0.174168f,
		0.176125f, 0.178082f, 0.180039f, 0.181996f, 0.183953f, 0.18591f,
		0.187867f, 0.189824f, 0.191781f, 0.193738f, 0.195695f, 0.197652f,
		0.199609f, 0.201566f, 0.203523f, 0.205479f, 0.207436f, 0.209393f,
		0.21135f, 0.213307f, 0.215264f, 0.217221f, 0.219178f, 0.221135f,
		0.223092f, 0.225049f, 0.227006f, 0.228963f, 0.23092f, 0.232877f,
		0.234834f, 0.236791f, 0.238748f, 0.240705f, 0.242661f, 0.244618f,
		0.246575f, 0.248532f, 0.250489f, 0.252446f, 0.254403f, 0.25636f,
		0.258317f, 0.260274f, 0.262231f, 0.264188f, 0.266145f, 0.268102f,
		0.270059f, 0.272016f, 0.273973f, 0.27593f, 0.277887f, 0.279843f,
		0.2818f, 0.283757f, 0.285714f, 0.287671f, 0.289628f, 0.291585f,
		0.293542f, 0.295499f, 0.297456f, 0.299413f, 0.30137f, 0.303327f,
		0.305284f, 0.307241f, 0.309198f, 0.311155f, 0.313112f, 0.315068f,
		0.317025f, 0.318982f, 0.320939f, 0.322896f, 0.324853f, 0.32681f,
		0.328767f, 0.330724f, 0.332681f, 0.334638f, 0.336595f, 0.338552f,
		0.340509f, 0.342466f, 0.344423f, 0.34638f, 0.348337f, 0.350294f,
		0.35225f, 0.354207f, 0.356164f, 0.358121f, 0.360078f, 0.362035f,
		0.363992f, 0.365949f, 0.367906f, 0.369863f, 0.37182f, 0.373777f,
		0.375734f, 0.377691f, 0.379648f, 0.381605f, 0.383562f, 0.385519f,
		0.387476f, 0.389432f, 0.391389f, 0.393346f, 0.395303f, 0.39726f,
		0.399217f, 0.401174f, 0.403131f, 0.405088f, 0.407045f, 0.409002f,
		0.410959f, 0.412916f, 0.414873f, 0.41683f, 0.418787f, 0.420744f,
		0.422701f, 0.424658f, 0.426615f, 0.428571f, 0.430528f, 0.432485f,
		0.434442f, 0.436399f, 0.438356f, 0.440313f, 0.44227f, 0.444227f,
		0.446184f, 0.448141f, 0.450098f, 0.452055f, 0.454012f, 0.455969f,
		0.457926f, 0.459883f, 0.46184f, 0.463796f, 0.465753f, 0.46771f,
		0.469667f, 0.471624f, 0.473581f, 0.475538f, 0.477495f, 0.479452f,
		0.481409f, 0.483366f, 0.485323f, 0.48728f, 0.489237f, 0.491194f,
		0.493151f, 0.495108f, 0.497065f, 0.499022f, 0.500978f, 0.502935f,
		0.504892f, 0.506849f, 0.508806f, 0.510763f, 0.51272f, 0.514677f,
		0.516634f, 0.518591f, 0.520548f, 0.522505f, 0.524462f, 0.526419f,
		0.528376f, 0.530333f, 0.53229f, 0.534247f, 0.536204f, 0.53816f,
		0.540117f, 0.542074f, 0.544031f, 0.545988f, 0.547945f, 0.549902f,
		0.551859f, 0.553816f, 0.555773f, 0.55773f, 0.559687f, 0.561644f,
		0.563601f, 0.565558f, 0.567515f, 0.569472f, 0.571429f, 0.573386f,
		0.575342f, 0.577299f, 0.579256f, 0.581213f, 0.58317f, 0.585127f,
		0.587084f, 0.589041f, 0.590998f, 0.592955f, 0.594912f, 0.596869f,
		0.598826f, 0.600783f, 0.60274f, 0.604697f, 0.606654f, 0.608611f,
		0.610568f, 0.612524f, 0.614481f, 0.616438f, 0.618395f, 0.620352f,
		0.622309f, 0.624266f, 0.626223f, 0.62818f, 0.630137f, 0.632094f,
		0.634051f, 0.636008f, 0.637965f, 0.639922f, 0.641879f, 0.643836f,
		0.645793f, 0.647749f, 0.649706f, 0.651663f, 0.65362f, 0.655577f,
		0.657534f, 0.659491f, 0.661448f, 0.663405f, 0.665362f, 0.667319f,
		0.669276f, 0.671233f, 0.67319f, 0.675147f, 0.677104f, 0.679061f,
		0.681018f, 0.682975f, 0.684932f, 0.686888f, 0.688845f, 0.690802f,
		0.692759f, 0.694716f, 0.696673f, 0.69863f, 0.700587f, 0.702544f,
		0.704501f, 0.706458f, 0.708415f, 0.710372f, 0.712329f, 0.714286f,
		0.716243f, 0.7182f, 0.720157f, 0.722113f, 0.72407f, 0.726027f,
		0.727984f, 0.729941f, 0.731898f, 0.733855f, 0.735812f, 0.737769f,
		0.739726f, 0.741683f, 0.74364f, 0.745597f, 0.747554f, 0.749511f,
		0.751468f, 0.753425f, 0.755382f, 0.757339f, 0.759296f, 0.761252f,
		0.763209f, 0.765166f, 0.767123f, 0.76908f, 0.771037f, 0.772994f,
		0.774951f, 0.776908f, 0.778865f, 0.780822f, 0.782779f, 0.784736f,
		0.786693f, 0.78865f, 0.790607f, 0.792564f, 0.794521f, 0.796477f,
		0.798434f, 0.800391f, 0.802348f, 0.804305f, 0.806262f, 0.808219f,
		0.810176f, 0.812133f, 0.81409f, 0.816047f, 0.818004f, 0.819961f,
		0.821918f, 0.823875f, 0.825832f, 0.827789f, 0.829746f, 0.831703f,
		0.833659f, 0.835616f, 0.837573f, 0.83953f, 0.841487f, 0.843444f,
		0.845401f, 0.847358f, 0.849315f, 0.851272f, 0.853229f, 0.855186f,
		0.857143f, 0.8591f, 0.861057f, 0.863014f, 0.864971f, 0.866928f,
		0.868885f, 0.870842f, 0.872798f, 0.874755f, 0.876712f, 0.878669f,
		0.880626f, 0.882583f, 0.88454f, 0.886497f, 0.888454f, 0.890411f,
		0.892368f, 0.894325f, 0.896282f, 0.898239f, 0.900196f, 0.902153f,
		0.90411f, 0.906067f, 0.908023f, 0.90998f, 0.911937f, 0.913894f,
		0.915851f, 0.917808f, 0.919765f, 0.921722f, 0.923679f, 0.925636f,
		0.927593f, 0.92955f, 0.931507f, 0.933464f, 0.935421f, 0.937378f,
		0.939335f, 0.941292f, 0.943249f, 0.945205f, 0.947162f, 0.949119f,
		0.951076f, 0.953033f, 0.95499f, 0.956947f, 0.958904f, 0.960861f,
		0.962818f, 0.964775f, 0.966732f, 0.968689f, 0.970646f, 0.972603f,
		0.97456f, 0.976517f, 0.978474f, 0.98043f, 0.982388f, 0.984344f,
		0.986301f, 0.988258f, 0.990215f, 0.992172f, 0.994129f, 0.996086f,
		0.998043f, 1.f
	};
};

using cable_table2_t = wrap::data<control::cable_table<cable_table2_mod>, 
                                  data::embedded::table<cable_table2_t_data>>;

struct cable_table3_t_data
{
	span<float, 512> data =
	{
		1.f, 0.998043f, 0.996086f, 0.994129f, 0.992172f, 0.990215f,
		0.988258f, 0.986301f, 0.984344f, 0.982387f, 0.980431f, 0.978474f,
		0.976517f, 0.97456f, 0.972603f, 0.970646f, 0.968689f, 0.966732f,
		0.964775f, 0.962818f, 0.960861f, 0.958904f, 0.956947f, 0.95499f,
		0.953033f, 0.951076f, 0.949119f, 0.947162f, 0.945205f, 0.943249f,
		0.941292f, 0.939335f, 0.937378f, 0.935421f, 0.933464f, 0.931507f,
		0.92955f, 0.927593f, 0.925636f, 0.923679f, 0.921722f, 0.919765f,
		0.917808f, 0.915851f, 0.913894f, 0.911937f, 0.90998f, 0.908023f,
		0.906067f, 0.90411f, 0.902153f, 0.900196f, 0.898239f, 0.896282f,
		0.894325f, 0.892368f, 0.890411f, 0.888454f, 0.886497f, 0.88454f,
		0.882583f, 0.880626f, 0.878669f, 0.876712f, 0.874755f, 0.872798f,
		0.870842f, 0.868885f, 0.866928f, 0.864971f, 0.863014f, 0.861057f,
		0.8591f, 0.857143f, 0.855186f, 0.853229f, 0.851272f, 0.849315f,
		0.847358f, 0.845401f, 0.843444f, 0.841487f, 0.83953f, 0.837573f,
		0.835616f, 0.833659f, 0.831703f, 0.829746f, 0.827789f, 0.825832f,
		0.823875f, 0.821918f, 0.819961f, 0.818004f, 0.816047f, 0.81409f,
		0.812133f, 0.810176f, 0.808219f, 0.806262f, 0.804305f, 0.802348f,
		0.800391f, 0.798434f, 0.796477f, 0.794521f, 0.792564f, 0.790607f,
		0.78865f, 0.786693f, 0.784736f, 0.782779f, 0.780822f, 0.778865f,
		0.776908f, 0.774951f, 0.772994f, 0.771037f, 0.76908f, 0.767123f,
		0.765166f, 0.763209f, 0.761252f, 0.759295f, 0.757339f, 0.755382f,
		0.753425f, 0.751468f, 0.749511f, 0.747554f, 0.745597f, 0.74364f,
		0.741683f, 0.739726f, 0.737769f, 0.735812f, 0.733855f, 0.731898f,
		0.729941f, 0.727984f, 0.726027f, 0.72407f, 0.722113f, 0.720157f,
		0.7182f, 0.716243f, 0.714286f, 0.712329f, 0.710372f, 0.708415f,
		0.706458f, 0.704501f, 0.702544f, 0.700587f, 0.69863f, 0.696673f,
		0.694716f, 0.692759f, 0.690802f, 0.688845f, 0.686888f, 0.684932f,
		0.682975f, 0.681018f, 0.679061f, 0.677104f, 0.675147f, 0.67319f,
		0.671233f, 0.669276f, 0.667319f, 0.665362f, 0.663405f, 0.661448f,
		0.659491f, 0.657534f, 0.655577f, 0.65362f, 0.651663f, 0.649706f,
		0.64775f, 0.645793f, 0.643836f, 0.641879f, 0.639922f, 0.637965f,
		0.636008f, 0.634051f, 0.632094f, 0.630137f, 0.62818f, 0.626223f,
		0.624266f, 0.622309f, 0.620352f, 0.618395f, 0.616438f, 0.614481f,
		0.612524f, 0.610568f, 0.608611f, 0.606654f, 0.604697f, 0.60274f,
		0.600783f, 0.598826f, 0.596869f, 0.594912f, 0.592955f, 0.590998f,
		0.589041f, 0.587084f, 0.585127f, 0.58317f, 0.581213f, 0.579256f,
		0.577299f, 0.575342f, 0.573385f, 0.571429f, 0.569472f, 0.567515f,
		0.565558f, 0.563601f, 0.561644f, 0.559687f, 0.55773f, 0.555773f,
		0.553816f, 0.551859f, 0.549902f, 0.547945f, 0.545988f, 0.544031f,
		0.542074f, 0.540117f, 0.53816f, 0.536204f, 0.534247f, 0.53229f,
		0.530333f, 0.528376f, 0.526419f, 0.524462f, 0.522505f, 0.520548f,
		0.518591f, 0.516634f, 0.514677f, 0.51272f, 0.510763f, 0.508806f,
		0.506849f, 0.504892f, 0.502935f, 0.500978f, 0.499022f, 0.497065f,
		0.495108f, 0.493151f, 0.491194f, 0.489237f, 0.48728f, 0.485323f,
		0.483366f, 0.481409f, 0.479452f, 0.477495f, 0.475538f, 0.473581f,
		0.471624f, 0.469667f, 0.46771f, 0.465753f, 0.463796f, 0.46184f,
		0.459883f, 0.457926f, 0.455969f, 0.454012f, 0.452055f, 0.450098f,
		0.448141f, 0.446184f, 0.444227f, 0.44227f, 0.440313f, 0.438356f,
		0.436399f, 0.434442f, 0.432485f, 0.430528f, 0.428571f, 0.426614f,
		0.424658f, 0.422701f, 0.420744f, 0.418787f, 0.41683f, 0.414873f,
		0.412916f, 0.410959f, 0.409002f, 0.407045f, 0.405088f, 0.403131f,
		0.401174f, 0.399217f, 0.39726f, 0.395303f, 0.393346f, 0.391389f,
		0.389432f, 0.387476f, 0.385519f, 0.383562f, 0.381605f, 0.379648f,
		0.377691f, 0.375734f, 0.373777f, 0.37182f, 0.369863f, 0.367906f,
		0.365949f, 0.363992f, 0.362035f, 0.360078f, 0.358121f, 0.356164f,
		0.354207f, 0.352251f, 0.350294f, 0.348337f, 0.34638f, 0.344423f,
		0.342466f, 0.340509f, 0.338552f, 0.336595f, 0.334638f, 0.332681f,
		0.330724f, 0.328767f, 0.32681f, 0.324853f, 0.322896f, 0.320939f,
		0.318982f, 0.317025f, 0.315068f, 0.313112f, 0.311155f, 0.309198f,
		0.307241f, 0.305284f, 0.303327f, 0.30137f, 0.299413f, 0.297456f,
		0.295499f, 0.293542f, 0.291585f, 0.289628f, 0.287671f, 0.285714f,
		0.283757f, 0.2818f, 0.279843f, 0.277887f, 0.27593f, 0.273973f,
		0.272016f, 0.270059f, 0.268102f, 0.266145f, 0.264188f, 0.262231f,
		0.260274f, 0.258317f, 0.25636f, 0.254403f, 0.252446f, 0.250489f,
		0.248532f, 0.246575f, 0.244618f, 0.242661f, 0.240704f, 0.238748f,
		0.236791f, 0.234834f, 0.232877f, 0.23092f, 0.228963f, 0.227006f,
		0.225049f, 0.223092f, 0.221135f, 0.219178f, 0.217221f, 0.215264f,
		0.213307f, 0.21135f, 0.209393f, 0.207436f, 0.205479f, 0.203523f,
		0.201566f, 0.199609f, 0.197652f, 0.195695f, 0.193738f, 0.191781f,
		0.189824f, 0.187867f, 0.18591f, 0.183953f, 0.181996f, 0.180039f,
		0.178082f, 0.176125f, 0.174168f, 0.172211f, 0.170254f, 0.168297f,
		0.166341f, 0.164384f, 0.162427f, 0.16047f, 0.158513f, 0.156556f,
		0.154599f, 0.152642f, 0.150685f, 0.148728f, 0.146771f, 0.144814f,
		0.142857f, 0.1409f, 0.138943f, 0.136986f, 0.135029f, 0.133072f,
		0.131115f, 0.129158f, 0.127202f, 0.125245f, 0.123288f, 0.121331f,
		0.119374f, 0.117417f, 0.11546f, 0.113503f, 0.111546f, 0.109589f,
		0.107632f, 0.105675f, 0.103718f, 0.101761f, 0.0998043f, 0.0978474f,
		0.0958903f, 0.0939335f, 0.0919765f, 0.0900196f, 0.0880627f, 0.0861056f,
		0.0841488f, 0.0821917f, 0.0802348f, 0.0782779f, 0.0763209f, 0.0743641f,
		0.072407f, 0.0704501f, 0.0684931f, 0.0665362f, 0.0645792f, 0.0626223f,
		0.0606654f, 0.0587084f, 0.0567515f, 0.0547945f, 0.0528376f, 0.0508806f,
		0.0489237f, 0.0469668f, 0.0450097f, 0.0430529f, 0.0410959f, 0.039139f,
		0.037182f, 0.035225f, 0.0332682f, 0.0313111f, 0.0293542f, 0.0273973f,
		0.0254403f, 0.0234835f, 0.0215264f, 0.0195695f, 0.0176125f, 0.0156556f,
		0.0136986f, 0.0117417f, 0.00978482f, 0.00782776f, 0.00587088f, 0.00391382f,
		0.00195694f, 0.f
	};
};

using cable_table3_t = wrap::data<control::cable_table<parameter::empty>, 
                                  data::embedded::table<cable_table3_t_data>>;

DECLARE_PARAMETER_RANGE(cable_table4_modRange, 
                        -1., 
                        1.);

using cable_table4_mod = parameter::from0To1<jdsp::jchorus, 
                                             2, 
                                             cable_table4_modRange>;

struct cable_table4_t_data
{
	span<float, 512> data =
	{
		0.292135f, 0.293256f, 0.294378f, 0.295499f, 0.29662f, 0.297742f,
		0.298863f, 0.299985f, 0.301106f, 0.302227f, 0.303349f, 0.30447f,
		0.305592f, 0.306713f, 0.307834f, 0.308956f, 0.310077f, 0.311199f,
		0.31232f, 0.313441f, 0.314563f, 0.315684f, 0.316806f, 0.317927f,
		0.319048f, 0.32017f, 0.321291f, 0.322413f, 0.323534f, 0.324655f,
		0.325777f, 0.326898f, 0.328019f, 0.329141f, 0.330262f, 0.331384f,
		0.332505f, 0.333627f, 0.334748f, 0.335869f, 0.336991f, 0.338112f,
		0.339233f, 0.340355f, 0.341476f, 0.342598f, 0.343719f, 0.34484f,
		0.345962f, 0.347083f, 0.348205f, 0.349326f, 0.350447f, 0.351569f,
		0.35269f, 0.353812f, 0.354933f, 0.356054f, 0.357176f, 0.358297f,
		0.359419f, 0.36054f, 0.361661f, 0.362783f, 0.363904f, 0.365026f,
		0.366147f, 0.367268f, 0.36839f, 0.369511f, 0.370633f, 0.371754f,
		0.372875f, 0.373997f, 0.375118f, 0.37624f, 0.377361f, 0.378482f,
		0.379604f, 0.380725f, 0.381847f, 0.382968f, 0.384089f, 0.385211f,
		0.386332f, 0.387454f, 0.388575f, 0.389696f, 0.390818f, 0.391939f,
		0.393061f, 0.394182f, 0.395303f, 0.396425f, 0.397546f, 0.398668f,
		0.399789f, 0.40091f, 0.402032f, 0.403153f, 0.404275f, 0.405396f,
		0.406517f, 0.407639f, 0.40876f, 0.409881f, 0.411003f, 0.412124f,
		0.413246f, 0.414367f, 0.415488f, 0.41661f, 0.417731f, 0.418853f,
		0.419974f, 0.421095f, 0.422217f, 0.423338f, 0.42446f, 0.425581f,
		0.426702f, 0.427824f, 0.428945f, 0.430067f, 0.431188f, 0.432309f,
		0.433431f, 0.434552f, 0.435674f, 0.436795f, 0.437916f, 0.439038f,
		0.440159f, 0.441281f, 0.442402f, 0.443523f, 0.444645f, 0.445766f,
		0.446888f, 0.448009f, 0.44913f, 0.450252f, 0.451373f, 0.452495f,
		0.453616f, 0.454737f, 0.455859f, 0.45698f, 0.458102f, 0.459223f,
		0.460344f, 0.461466f, 0.462587f, 0.463709f, 0.46483f, 0.465951f,
		0.467073f, 0.468194f, 0.469316f, 0.470437f, 0.471558f, 0.47268f,
		0.473801f, 0.474922f, 0.476044f, 0.477165f, 0.478287f, 0.479408f,
		0.480529f, 0.481651f, 0.482772f, 0.483894f, 0.485015f, 0.486136f,
		0.487258f, 0.488379f, 0.489501f, 0.490622f, 0.491743f, 0.492865f,
		0.493986f, 0.495108f, 0.496229f, 0.49735f, 0.498472f, 0.499593f,
		0.500715f, 0.501836f, 0.502957f, 0.504079f, 0.5052f, 0.506322f,
		0.507443f, 0.508564f, 0.509686f, 0.510807f, 0.511929f, 0.51305f,
		0.514171f, 0.515293f, 0.516414f, 0.517536f, 0.518657f, 0.519778f,
		0.5209f, 0.522021f, 0.523143f, 0.524264f, 0.525385f, 0.526507f,
		0.527628f, 0.52875f, 0.529871f, 0.530992f, 0.532114f, 0.533235f,
		0.534357f, 0.535478f, 0.536599f, 0.537721f, 0.538842f, 0.539963f,
		0.541085f, 0.542206f, 0.543328f, 0.544449f, 0.54557f, 0.546692f,
		0.547813f, 0.548935f, 0.550056f, 0.551178f, 0.552299f, 0.55342f,
		0.554542f, 0.555663f, 0.556784f, 0.557906f, 0.559027f, 0.560149f,
		0.56127f, 0.562391f, 0.563513f, 0.564634f, 0.565756f, 0.566877f,
		0.567998f, 0.56912f, 0.570241f, 0.571363f, 0.572484f, 0.573605f,
		0.574727f, 0.575848f, 0.57697f, 0.578091f, 0.579212f, 0.580334f,
		0.581455f, 0.582577f, 0.583698f, 0.584819f, 0.585941f, 0.587062f,
		0.588184f, 0.589305f, 0.590426f, 0.591548f, 0.592669f, 0.593791f,
		0.594912f, 0.596033f, 0.597155f, 0.598276f, 0.599398f, 0.600519f,
		0.60164f, 0.602762f, 0.603883f, 0.605005f, 0.606126f, 0.607247f,
		0.608369f, 0.60949f, 0.610612f, 0.611733f, 0.612854f, 0.613976f,
		0.615097f, 0.616218f, 0.61734f, 0.618461f, 0.619583f, 0.620704f,
		0.621825f, 0.622947f, 0.624068f, 0.62519f, 0.626311f, 0.627432f,
		0.628554f, 0.629675f, 0.630797f, 0.631918f, 0.633039f, 0.634161f,
		0.635282f, 0.636404f, 0.637525f, 0.638646f, 0.639768f, 0.640889f,
		0.642011f, 0.643132f, 0.644253f, 0.645375f, 0.646496f, 0.647618f,
		0.648739f, 0.64986f, 0.650982f, 0.652103f, 0.653225f, 0.654346f,
		0.655467f, 0.656589f, 0.65771f, 0.658832f, 0.659953f, 0.661074f,
		0.662196f, 0.663317f, 0.664439f, 0.66556f, 0.666681f, 0.667803f,
		0.668924f, 0.670045f, 0.671167f, 0.672288f, 0.67341f, 0.674531f,
		0.675653f, 0.676774f, 0.677895f, 0.679017f, 0.680138f, 0.68126f,
		0.682381f, 0.683502f, 0.684624f, 0.685745f, 0.686867f, 0.687988f,
		0.689109f, 0.690231f, 0.691352f, 0.692473f, 0.693595f, 0.694716f,
		0.695838f, 0.696959f, 0.69808f, 0.699202f, 0.700323f, 0.701445f,
		0.702566f, 0.703687f, 0.704809f, 0.70593f, 0.707052f, 0.708173f,
		0.709294f, 0.710416f, 0.711537f, 0.712659f, 0.71378f, 0.714901f,
		0.716023f, 0.717144f, 0.718266f, 0.719387f, 0.720508f, 0.72163f,
		0.722751f, 0.723873f, 0.724994f, 0.726115f, 0.727237f, 0.728358f,
		0.72948f, 0.730601f, 0.731722f, 0.732844f, 0.733965f, 0.735087f,
		0.736208f, 0.737329f, 0.738451f, 0.739572f, 0.740694f, 0.741815f,
		0.742936f, 0.744058f, 0.745179f, 0.746301f, 0.747422f, 0.748543f,
		0.749665f, 0.750786f, 0.751907f, 0.753029f, 0.75415f, 0.755272f,
		0.756393f, 0.757514f, 0.758636f, 0.759757f, 0.760879f, 0.762f,
		0.763121f, 0.764243f, 0.765364f, 0.766486f, 0.767607f, 0.768728f,
		0.76985f, 0.770971f, 0.772093f, 0.773214f, 0.774335f, 0.775457f,
		0.776578f, 0.7777f, 0.778821f, 0.779942f, 0.781064f, 0.782185f,
		0.783307f, 0.784428f, 0.785549f, 0.786671f, 0.787792f, 0.788914f,
		0.790035f, 0.791156f, 0.792278f, 0.793399f, 0.794521f, 0.795642f,
		0.796763f, 0.797885f, 0.799006f, 0.800128f, 0.801249f, 0.80237f,
		0.803492f, 0.804613f, 0.805735f, 0.806856f, 0.807977f, 0.809099f,
		0.81022f, 0.811342f, 0.812463f, 0.813584f, 0.814706f, 0.815827f,
		0.816948f, 0.81807f, 0.819191f, 0.820313f, 0.821434f, 0.822555f,
		0.823677f, 0.824798f, 0.82592f, 0.827041f, 0.828162f, 0.829284f,
		0.830405f, 0.831527f, 0.832648f, 0.833769f, 0.834891f, 0.836012f,
		0.837134f, 0.838255f, 0.839376f, 0.840498f, 0.841619f, 0.842741f,
		0.843862f, 0.844983f, 0.846105f, 0.847226f, 0.848348f, 0.849469f,
		0.85059f, 0.851712f, 0.852833f, 0.853955f, 0.855076f, 0.856197f,
		0.857319f, 0.85844f, 0.859562f, 0.860683f, 0.861804f, 0.862926f,
		0.864047f, 0.865169f
	};
};

using cable_table4_t = wrap::data<control::cable_table<cable_table4_mod>, 
                                  data::embedded::table<cable_table4_t_data>>;
using convolution_t = wrap::data<filters::convolution, 
                                 data::external::audiofile<0>>;

DECLARE_PARAMETER_RANGE_SKEW(cable_table_modRange, 
                             20., 
                             20000., 
                             0.229905);

template <int NV>
using cable_table_mod = parameter::from0To1<filters::one_pole<NV>, 
                                            0, 
                                            cable_table_modRange>;

struct cable_table_t_data
{
	span<float, 512> data =
	{
		0.f, 0.00394469f, 0.00788945f, 0.0118341f, 0.0157788f, 0.0197235f,
		0.0236683f, 0.027613f, 0.0315577f, 0.0355024f, 0.0394471f, 0.0433918f,
		0.0473366f, 0.0512813f, 0.055226f, 0.0591707f, 0.0631154f, 0.0670601f,
		0.0710048f, 0.0749495f, 0.0788943f, 0.082839f, 0.0867836f, 0.0907284f,
		0.0946731f, 0.0986178f, 0.102563f, 0.106507f, 0.110452f, 0.114397f,
		0.118341f, 0.122286f, 0.126231f, 0.130176f, 0.13412f, 0.138065f,
		0.14201f, 0.145954f, 0.149899f, 0.153844f, 0.157789f, 0.161733f,
		0.165678f, 0.169623f, 0.173567f, 0.177512f, 0.181457f, 0.185401f,
		0.189346f, 0.193291f, 0.197236f, 0.20118f, 0.205125f, 0.20907f,
		0.213014f, 0.216959f, 0.220904f, 0.224849f, 0.228793f, 0.232738f,
		0.236683f, 0.240627f, 0.244572f, 0.248517f, 0.252462f, 0.256406f,
		0.260351f, 0.264296f, 0.26824f, 0.272185f, 0.27613f, 0.280075f,
		0.284019f, 0.287964f, 0.291909f, 0.295853f, 0.299798f, 0.303743f,
		0.307688f, 0.311632f, 0.315577f, 0.319522f, 0.323466f, 0.327411f,
		0.331356f, 0.335301f, 0.339245f, 0.34319f, 0.347135f, 0.351079f,
		0.355024f, 0.358969f, 0.362913f, 0.366858f, 0.370803f, 0.374748f,
		0.378692f, 0.382637f, 0.386582f, 0.390527f, 0.394471f, 0.398416f,
		0.402361f, 0.406305f, 0.41025f, 0.414195f, 0.41814f, 0.422084f,
		0.426029f, 0.429974f, 0.433918f, 0.437863f, 0.441808f, 0.445753f,
		0.449697f, 0.453642f, 0.457587f, 0.461531f, 0.465476f, 0.469421f,
		0.473365f, 0.47731f, 0.481255f, 0.4852f, 0.489144f, 0.493089f,
		0.497034f, 0.500978f, 0.504923f, 0.508868f, 0.512813f, 0.516757f,
		0.520702f, 0.524647f, 0.528591f, 0.532536f, 0.536481f, 0.540426f,
		0.54437f, 0.548315f, 0.55226f, 0.556204f, 0.560149f, 0.564094f,
		0.568039f, 0.571983f, 0.575928f, 0.579873f, 0.583817f, 0.587762f,
		0.591707f, 0.595652f, 0.599596f, 0.603541f, 0.607486f, 0.61143f,
		0.615375f, 0.61932f, 0.623265f, 0.627209f, 0.631154f, 0.635099f,
		0.639043f, 0.642988f, 0.646933f, 0.650878f, 0.654822f, 0.658767f,
		0.662712f, 0.666656f, 0.670601f, 0.674546f, 0.678491f, 0.682435f,
		0.68638f, 0.690325f, 0.694269f, 0.698214f, 0.702159f, 0.706104f,
		0.710048f, 0.713993f, 0.717938f, 0.721882f, 0.725827f, 0.729772f,
		0.733717f, 0.737661f, 0.741606f, 0.745551f, 0.749495f, 0.75344f,
		0.757385f, 0.761329f, 0.765274f, 0.769219f, 0.773164f, 0.777108f,
		0.781053f, 0.784998f, 0.788942f, 0.792887f, 0.796832f, 0.800777f,
		0.804721f, 0.808666f, 0.812611f, 0.816556f, 0.8205f, 0.824445f,
		0.82839f, 0.832334f, 0.836279f, 0.840224f, 0.844168f, 0.848113f,
		0.852058f, 0.856003f, 0.859947f, 0.863892f, 0.867837f, 0.871781f,
		0.875726f, 0.879671f, 0.883616f, 0.88756f, 0.891505f, 0.89545f,
		0.899394f, 0.903339f, 0.907284f, 0.911229f, 0.915173f, 0.919118f,
		0.923063f, 0.927007f, 0.930952f, 0.934897f, 0.938842f, 0.942786f,
		0.946731f, 0.950676f, 0.95462f, 0.958565f, 0.96251f, 0.966455f,
		0.970399f, 0.974344f, 0.978289f, 0.982233f, 0.986178f, 0.990123f,
		0.994067f, 0.998012f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f, 1.f, 1.f, 1.f, 1.f,
		1.f, 1.f
	};
};

template <int NV>
using cable_table_t = wrap::data<control::cable_table<cable_table_mod<NV>>, 
                                 data::embedded::table<cable_table_t_data>>;

template <int NV> using cable_table1_mod = cable_table_mod<NV>;

struct cable_table1_t_data
{
	span<float, 512> data =
	{
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
		0.f, 0.f, 0.f, 0.f, 0.00187451f, 0.0057134f,
		0.0095523f, 0.0133912f, 0.0172302f, 0.021069f, 0.0249079f, 0.0287468f,
		0.0325857f, 0.0364246f, 0.0402637f, 0.0441025f, 0.0479414f, 0.0517804f,
		0.0556193f, 0.0594582f, 0.0632971f, 0.067136f, 0.070975f, 0.0748139f,
		0.0786528f, 0.0824917f, 0.0863306f, 0.0901695f, 0.0940084f, 0.0978473f,
		0.101686f, 0.105525f, 0.109364f, 0.113203f, 0.117042f, 0.120881f,
		0.12472f, 0.128559f, 0.132398f, 0.136237f, 0.140075f, 0.143914f,
		0.147753f, 0.151592f, 0.155431f, 0.15927f, 0.163109f, 0.166948f,
		0.170787f, 0.174626f, 0.178465f, 0.182303f, 0.186142f, 0.189981f,
		0.19382f, 0.197659f, 0.201498f, 0.205337f, 0.209176f, 0.213015f,
		0.216854f, 0.220693f, 0.224532f, 0.228371f, 0.232209f, 0.236048f,
		0.239887f, 0.243726f, 0.247565f, 0.251404f, 0.255243f, 0.259082f,
		0.262921f, 0.26676f, 0.270599f, 0.274437f, 0.278276f, 0.282115f,
		0.285954f, 0.289793f, 0.293632f, 0.297471f, 0.30131f, 0.305149f,
		0.308988f, 0.312827f, 0.316666f, 0.320504f, 0.324343f, 0.328182f,
		0.332021f, 0.33586f, 0.339699f, 0.343538f, 0.347377f, 0.351216f,
		0.355055f, 0.358894f, 0.362733f, 0.366571f, 0.37041f, 0.374249f,
		0.378088f, 0.381927f, 0.385766f, 0.389605f, 0.393444f, 0.397283f,
		0.401122f, 0.404961f, 0.4088f, 0.412638f, 0.416477f, 0.420316f,
		0.424155f, 0.427994f, 0.431833f, 0.435672f, 0.439511f, 0.44335f,
		0.447189f, 0.451028f, 0.454866f, 0.458705f, 0.462544f, 0.466383f,
		0.470222f, 0.474061f, 0.4779f, 0.481739f, 0.485578f, 0.489417f,
		0.493256f, 0.497095f, 0.500934f, 0.504772f, 0.508611f, 0.51245f,
		0.516289f, 0.520128f, 0.523967f, 0.527806f, 0.531645f, 0.535484f,
		0.539323f, 0.543162f, 0.547f, 0.550839f, 0.554678f, 0.558517f,
		0.562356f, 0.566195f, 0.570034f, 0.573873f, 0.577712f, 0.581551f,
		0.58539f, 0.589229f, 0.593068f, 0.596906f, 0.600745f, 0.604584f,
		0.608423f, 0.612262f, 0.616101f, 0.61994f, 0.623779f, 0.627618f,
		0.631457f, 0.635296f, 0.639134f, 0.642973f, 0.646812f, 0.650651f,
		0.65449f, 0.658329f, 0.662168f, 0.666007f, 0.669846f, 0.673685f,
		0.677524f, 0.681362f, 0.685202f, 0.68904f, 0.692879f, 0.696718f,
		0.700557f, 0.704396f, 0.708235f, 0.712074f, 0.715913f, 0.719752f,
		0.723591f, 0.72743f, 0.731268f, 0.735107f, 0.738946f, 0.742785f,
		0.746624f, 0.750463f, 0.754302f, 0.758141f, 0.76198f, 0.765819f,
		0.769658f, 0.773496f, 0.777335f, 0.781174f, 0.785013f, 0.788852f,
		0.792691f, 0.79653f, 0.800369f, 0.804208f, 0.808047f, 0.811886f,
		0.815725f, 0.819563f, 0.823402f, 0.827241f, 0.83108f, 0.834919f,
		0.838758f, 0.842597f, 0.846436f, 0.850275f, 0.854114f, 0.857953f,
		0.861792f, 0.86563f, 0.869469f, 0.873308f, 0.877147f, 0.880986f,
		0.884825f, 0.888664f, 0.892503f, 0.896342f, 0.900181f, 0.90402f,
		0.907859f, 0.911697f, 0.915536f, 0.919375f, 0.923214f, 0.927053f,
		0.930892f, 0.934731f, 0.93857f, 0.942409f, 0.946248f, 0.950087f,
		0.953925f, 0.957764f, 0.961603f, 0.965442f, 0.969281f, 0.97312f,
		0.976959f, 0.980798f, 0.984637f, 0.988476f, 0.992315f, 0.996154f,
		0.999992f, 1.f
	};
};

template <int NV>
using cable_table1_t = wrap::data<control::cable_table<cable_table1_mod<NV>>, 
                                  data::embedded::table<cable_table1_t_data>>;

template <int NV>
using chain2_t = container::chain<parameter::empty, 
                                  wrap::fix<2, control::tempo_sync<NV>>, 
                                  project::Comb<NV>, 
                                  cable_table2_t, 
                                  cable_table3_t, 
                                  cable_table4_t, 
                                  convolution_t, 
                                  jdsp::jchorus, 
                                  cable_table_t<NV>, 
                                  filters::one_pole<NV>, 
                                  cable_table1_t<NV>, 
                                  filters::one_pole<NV>, 
                                  core::gain<NV>>;

template <int NV>
using split_t = container::split<parameter::empty, 
                                 wrap::fix<2, chain1_t<NV>>, 
                                 chain2_t<NV>>;

template <int NV>
using chain_t = container::chain<parameter::empty, 
                                 wrap::fix<2, dry_wet_mixer_t<NV>>, 
                                 split_t<NV>>;

namespace verb_t_parameters
{
// Parameter list for verb_impl::verb_t ------------------------------------------------------------

template <int NV>
using wet = parameter::chain<ranges::Identity, 
                             parameter::plain<verb_impl::dry_wet_mixer_t<NV>, 0>, 
                             parameter::plain<jdsp::jchorus, 1>>;

DECLARE_PARAMETER_RANGE_STEP(delay_0Range, 
                             0., 
                             18., 
                             1.);

template <int NV>
using delay_0 = parameter::from0To1<control::tempo_sync<NV>, 
                                    0, 
                                    delay_0Range>;

DECLARE_PARAMETER_RANGE(delay_2Range, 
                        0., 
                        100.);

using delay_2 = parameter::from0To1<jdsp::jchorus, 
                                    0, 
                                    delay_2Range>;

template <int NV>
using delay = parameter::chain<ranges::Identity, 
                               delay_0<NV>, 
                               parameter::plain<verb_impl::cable_table4_t, 0>, 
                               delay_2>;

template <int NV>
using filter = parameter::chain<ranges::Identity, 
                                parameter::plain<verb_impl::cable_table1_t<NV>, 0>, 
                                parameter::plain<verb_impl::cable_table_t<NV>, 0>>;

using depth = parameter::chain<ranges::Identity, 
                               parameter::plain<verb_impl::cable_table2_t, 0>, 
                               parameter::plain<verb_impl::cable_table3_t, 0>>;

template <int NV>
using verb_t_plist = parameter::list<wet<NV>, 
                                     delay<NV>, 
                                     filter<NV>, 
                                     depth>;
}

template <int NV>
using verb_t_ = container::chain<verb_t_parameters::verb_t_plist<NV>, 
                                 wrap::fix<2, chain_t<NV>>>;

// =================================| Root node initialiser class |=================================

template <int NV> struct instance: public verb_impl::verb_t_<NV>
{
	
	struct metadata
	{
		static const int NumTables = 0;
		static const int NumSliderPacks = 0;
		static const int NumAudioFiles = 1;
		static const int NumFilters = 0;
		static const int NumDisplayBuffers = 0;
		
		SNEX_METADATA_ID(verb);
		SNEX_METADATA_NUM_CHANNELS(2);
		SNEX_METADATA_ENCODED_PARAMETERS(62)
		{
			0x005B, 0x0000, 0x7700, 0x7465, 0x0000, 0x0000, 0x0000, 0x8000, 
            0x003F, 0x0000, 0x0000, 0x8000, 0x003F, 0x0000, 0x5B00, 0x0001, 
            0x0000, 0x6564, 0x616C, 0x0079, 0x0000, 0x0000, 0x0000, 0x3F80, 
            0xC28F, 0x3D75, 0x0000, 0x3F80, 0x0000, 0x0000, 0x025B, 0x0000, 
            0x6600, 0x6C69, 0x6574, 0x0072, 0x0000, 0x0000, 0x0000, 0x3F80, 
            0x8105, 0x3E8C, 0x0000, 0x3F80, 0x0000, 0x0000, 0x035B, 0x0000, 
            0x6400, 0x7065, 0x6874, 0x0000, 0x0000, 0x0000, 0x8000, 0x293F, 
            0x8F5C, 0x003E, 0x8000, 0x003F, 0x0000, 0x0000
		};
	};
	
	instance()
	{
		// Node References -------------------------------------------------------------------------
		
		auto& chain = this->getT(0);                                // verb_impl::chain_t<NV>
		auto& dry_wet_mixer = this->getT(0).getT(0);                // verb_impl::dry_wet_mixer_t<NV>
		auto& split = this->getT(0).getT(1);                        // verb_impl::split_t<NV>
		auto& chain1 = this->getT(0).getT(1).getT(0);               // verb_impl::chain1_t<NV>
		auto& dry_gain = this->getT(0).getT(1).getT(0).getT(0);     // core::gain<NV>
		auto& chain2 = this->getT(0).getT(1).getT(1);               // verb_impl::chain2_t<NV>
		auto& tempo_sync1 = this->getT(0).getT(1).getT(1).getT(0);  // control::tempo_sync<NV>
		auto& faust = this->getT(0).getT(1).getT(1).getT(1);        // project::Comb<NV>
		auto& cable_table2 = this->getT(0).getT(1).getT(1).getT(2); // verb_impl::cable_table2_t
		auto& cable_table3 = this->getT(0).getT(1).getT(1).getT(3); // verb_impl::cable_table3_t
		auto& cable_table4 = this->getT(0).getT(1).getT(1).getT(4); // verb_impl::cable_table4_t
		auto& convolution = this->getT(0).getT(1).getT(1).getT(5);  // verb_impl::convolution_t
		auto& jchorus = this->getT(0).getT(1).getT(1).getT(6);      // jdsp::jchorus
		auto& cable_table = this->getT(0).getT(1).getT(1).getT(7);  // verb_impl::cable_table_t<NV>
		auto& one_pole = this->getT(0).getT(1).getT(1).getT(8);     // filters::one_pole<NV>
		auto& cable_table1 = this->getT(0).getT(1).getT(1).getT(9); // verb_impl::cable_table1_t<NV>
		auto& one_pole1 = this->getT(0).getT(1).getT(1).getT(10);   // filters::one_pole<NV>
		auto& wet_gain = this->getT(0).getT(1).getT(1).getT(11);    // core::gain<NV>
		
		// Parameter Connections -------------------------------------------------------------------
		
		auto& wet_p = this->getParameterT(0);
		wet_p.connectT(0, dry_wet_mixer); // wet -> dry_wet_mixer::Value
		wet_p.connectT(1, jchorus);       // wet -> jchorus::Depth
		
		auto& delay_p = this->getParameterT(1);
		delay_p.connectT(0, tempo_sync1);  // delay -> tempo_sync1::Tempo
		delay_p.connectT(1, cable_table4); // delay -> cable_table4::Value
		delay_p.connectT(2, jchorus);      // delay -> jchorus::CentreDelay
		
		auto& filter_p = this->getParameterT(2);
		filter_p.connectT(0, cable_table1); // filter -> cable_table1::Value
		filter_p.connectT(1, cable_table);  // filter -> cable_table::Value
		
		auto& depth_p = this->getParameterT(3);
		depth_p.connectT(0, cable_table2); // depth -> cable_table2::Value
		depth_p.connectT(1, cable_table3); // depth -> cable_table3::Value
		
		// Modulation Connections ------------------------------------------------------------------
		
		auto& dry_wet_mixer_p = dry_wet_mixer.getWrappedObject().getParameter();
		dry_wet_mixer_p.getParameterT(0).connectT(0, dry_gain);                // dry_wet_mixer -> dry_gain::Gain
		dry_wet_mixer_p.getParameterT(1).connectT(0, wet_gain);                // dry_wet_mixer -> wet_gain::Gain
		cable_table2.getWrappedObject().getParameter().connectT(0, jchorus);   // cable_table2 -> jchorus::Rate
		cable_table4.getWrappedObject().getParameter().connectT(0, jchorus);   // cable_table4 -> jchorus::Feedback
		cable_table.getWrappedObject().getParameter().connectT(0, one_pole);   // cable_table -> one_pole::Frequency
		cable_table1.getWrappedObject().getParameter().connectT(0, one_pole1); // cable_table1 -> one_pole1::Frequency
		
		// Default Values --------------------------------------------------------------------------
		
		; // dry_wet_mixer::Value is automated
		
		;                               // dry_gain::Gain is automated
		dry_gain.setParameterT(1, 20.); // core::gain::Smoothing
		dry_gain.setParameterT(2, 0.);  // core::gain::ResetValue
		
		;                                   // tempo_sync1::Tempo is automated
		tempo_sync1.setParameterT(1, 8.);   // control::tempo_sync::Multiplier
		tempo_sync1.setParameterT(2, 1.);   // control::tempo_sync::Enabled
		tempo_sync1.setParameterT(3, 18.4); // control::tempo_sync::UnsyncedTime
		
		faust.setParameterT(0, 0.93);  // core::faust::aN
		faust.setParameterT(1, 61.71); // core::faust::del
		
		; // cable_table2::Value is automated
		
		; // cable_table3::Value is automated
		
		; // cable_table4::Value is automated
		
		convolution.setParameterT(0, 1.);     // filters::convolution::Gate
		convolution.setParameterT(1, 354.);   // filters::convolution::Predelay
		convolution.setParameterT(2, -10.);   // filters::convolution::Damping
		convolution.setParameterT(3, 20000.); // filters::convolution::HiCut
		convolution.setParameterT(4, 1.);     // filters::convolution::Multithread
		
		;                             // jchorus::CentreDelay is automated
		;                             // jchorus::Depth is automated
		;                             // jchorus::Feedback is automated
		;                             // jchorus::Rate is automated
		jchorus.setParameterT(4, 1.); // jdsp::jchorus::Mix
		
		; // cable_table::Value is automated
		
		;                                // one_pole::Frequency is automated
		one_pole.setParameterT(1, 0.3);  // filters::one_pole::Q
		one_pole.setParameterT(2, 0.);   // filters::one_pole::Gain
		one_pole.setParameterT(3, 0.01); // filters::one_pole::Smoothing
		one_pole.setParameterT(4, 0.);   // filters::one_pole::Mode
		one_pole.setParameterT(5, 1.);   // filters::one_pole::Enabled
		
		; // cable_table1::Value is automated
		
		;                                 // one_pole1::Frequency is automated
		one_pole1.setParameterT(1, 0.3);  // filters::one_pole::Q
		one_pole1.setParameterT(2, 0.);   // filters::one_pole::Gain
		one_pole1.setParameterT(3, 0.01); // filters::one_pole::Smoothing
		one_pole1.setParameterT(4, 1.);   // filters::one_pole::Mode
		one_pole1.setParameterT(5, 1.);   // filters::one_pole::Enabled
		
		;                               // wet_gain::Gain is automated
		wet_gain.setParameterT(1, 20.); // core::gain::Smoothing
		wet_gain.setParameterT(2, 0.);  // core::gain::ResetValue
		
		this->setParameterT(0, 0.);
		this->setParameterT(1, 0.06);
		this->setParameterT(2, 0.274422);
		this->setParameterT(3, 0.28);
		this->setExternalData({}, -1);
	}
	~instance() override
	{
		// Cleanup external data references --------------------------------------------------------
		
		this->setExternalData({}, -1);
	}
	
	static constexpr bool isPolyphonic() { return NV > 1; };
	
	static constexpr bool isProcessingHiseEvent() { return true; };
	
	static constexpr bool hasTail() { return true; };
	
	static constexpr bool isSuspendedOnSilence() { return false; };
	
	void setExternalData(const ExternalData& b, int index)
	{
		// External Data Connections ---------------------------------------------------------------
		
		this->getT(0).getT(1).getT(1).getT(2).setExternalData(b, index); // verb_impl::cable_table2_t
		this->getT(0).getT(1).getT(1).getT(3).setExternalData(b, index); // verb_impl::cable_table3_t
		this->getT(0).getT(1).getT(1).getT(4).setExternalData(b, index); // verb_impl::cable_table4_t
		this->getT(0).getT(1).getT(1).getT(5).setExternalData(b, index); // verb_impl::convolution_t
		this->getT(0).getT(1).getT(1).getT(7).setExternalData(b, index); // verb_impl::cable_table_t<NV>
		this->getT(0).getT(1).getT(1).getT(9).setExternalData(b, index); // verb_impl::cable_table1_t<NV>
	}
};
}

#undef getT
#undef connectT
#undef setParameterT
#undef setParameterWT
#undef getParameterT
// ======================================| Public Definition |======================================

namespace project
{
// polyphonic template declaration

template <int NV>
using verb = wrap::node<verb_impl::instance<NV>>;
}


